oddeven:
        push ebp
        mov ebp, esp
        sub esp, 16
        mov eax, DWORD[ebp+4]
        and eax, 1
        jz evnn

odd:
        mov eax, 'o'
        mov [result], eax
        mov eax, 1
        int 0x80
        jmp end

evnn:
        mov eax, 'e'
        mov [result], eax
        mov eax, 1
        int 0x80

end:
        leave
        ret

section .text
        global _start

_start:
        push 24
        call _oddeven

        mov ebx, 0
        mov eax, 1
        int 0x80

segment .bss
        result resb 1
